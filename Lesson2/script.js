/* ______________________Task 1______________________ */

let a = 1, b = 1, c, d;

c = ++a; alert(c); // 2
/* Мы к переменной а прибавляем единицу. */

d = b++; alert(d); // 1
/* Мы прибавляем единицу, но выводим предыдущее значение переменной. */

c = (2 + ++a); alert(c); // 5
/* В первом примере мы прибавили единицу к переменной, и ее значение стало равным 2. 
В данном примере прибавляем еще единицу и "а" становится равным 3, отсюда ответ 5 (2 + 3 = 5). */

d = (2 + b++); alert(d); // 4
/* Во втором примере мы прибавили единицу в переменную "b" ее значение стало равным 2. 
В данном примере прибавляем еще единицу и "b" становится равным 3, но выводим предыдущее значение т.е. 2.
Отсюда получаем 4 (2 + 2 = 4). */

alert(a); // 3
/* Прибавили единицу в примере 1 и примере 3. 
Значение "a" стало равным 3. */

alert(b); // 3
/* Прибавили единицу в примере 2 и примере 4.
Значение "b" стало равным 3. */



/* ______________________Task 2______________________ */

let a = 2;
let x = 1 + (a *= 2);
alert(x);
/* "x" будет равен 5, т.к. оператор *= это сокращенный оператор, полностью выражение будет выглядеть так:
x = 1 + (a = a * 2 ) */



/* ______________________Task 3______________________ */

let a = 5;
let b = 3;
if (a > 0 && b > 0) {
    x = a - b;
    alert(x);
} else if (a < 0 && b < 0) {
    x = a * b;
    alert(x);
} else if (a > 0 && b < 0 || a < 0 && b > 0) {
    x = a + b;
    alert(x);
}
/* Ответ будет равным 2, т.к. 5 и 3 - это положительные числа.



/* ______________________Task 4______________________ */

a = +prompt('Введите число от 1 до 15:');
switch (a) {
    case 1:
        alert('Ваше число: 1');
        break;
    case 2:
        alert('Ваше число: 2');
        break;
    case 3:
        alert('Ваше число: 3');
        break;
    case 4:
        alert('Ваше число: 4');
        break;
    case 5:
        alert('Ваше число: 5');
        break;
    case 6:
        alert('Ваше число: 6');
        break;
    case 7:
        alert('Ваше число: 7');
        break;
    case 8:
        alert('Ваше число: 8');
        break;
    case 9:
        alert('Ваше число: 9');
        break;
    case 10:
        alert('Ваше число: 10');
        break;
    case 11:
        alert('Ваше число: 11');
        break;
    case 12:
        alert('Ваше число: 12');
        break;
    case 13:
        alert('Ваше число: 13');
        break;
    case 14:
        alert('Ваше число: 14');
        break;
    case 15:
        alert('Ваше число: 15');
        break;
}
/* Выводим на экран то число, которое ввел пользователь от 1 до 15.
Если пользователь ввел число не из указанного диапазона, то ничего на экран не выводим. */



/* ______________________Task 5______________________ */

let a = 2;
let b = 3;

function plus(a, b) {
    return a + b;
}

function minus(a, b) {
    return a - b;
}

function div(a, b) {
    return a / b;
}

function mult(a, b) {
    return a + b;
}



/* ______________________Task 6______________________ */

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case 'сложение':
            return arg1 + arg2;
            break;
        case 'вычитание':
            return arg1 - arg2;
            break;
        case 'деление':
            return arg1 / arg2;
            break;
        case 'умножение':
            return arg1 * arg2;
            break;
    }
}



/* ______________________Task 7______________________ */

alert(null > 0);  // false (1)
alert(null == 0); // false (2)
alert(null >= 0); // true (3)
alert(null || 0); // 0 (4)

/* Нестрогое равенство и сравнения (> < >= <=) в 1 и 3 примерах работают по-разному.
Сравнения преобразуют null в число, рассматривая его как 0.
Поэтому выражение (3) null >= 0 истинно, а выражение (1) null > 0 ложно.

С другой стороны, для нестрогого равенства == значений undefined и null действует особое правило:
эти значения ни к чему не приводятся, они равны друг другу и не равны ничему другому.
Поэтому выражение (2) null == 0 ложно, а в выражении (4) выводится истинное значение "0". */



/* ______________________Task 8______________________ */

function pow(x, n) {
    if (n != 1) {
        return x *= pow(x, n - 1);
    } else {
        return x;
    }
}
alert(pow(2, 7)); // 128